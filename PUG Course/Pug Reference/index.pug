doctype html
html
    head
        link(rel="stylesheet", href="styles.css")
        title PugJS Reference by Maruthi
    body
        div
            // 
                ATTRIBUTE REFERENCE IN HTML
                This section teaches about how to add html attributes to the code
            h2(class="attributes") Attributes
            a(href="https://www.google.com") Google
            br
            a(href="https://www.google.com", class="google-link", target="_blank") Google
            br
            a(href="https://www.google.com", class="google-link") Google
            // If the attribute names contain unwanted characters, include it in quotes
            div(class='div-class' '(click)'='play()') (click)
            
            // 
                ATTRIBUTE INTERPOLATION
                1. can use simple JS expressions
                2. use Template Strings if the JS runtime supports ES5
            br
            br
            - var pugUrl = 'https://pugjs.org';
            a(href=""+pugUrl, target="_blank") Go to PugJS
            br
            a(href=`${pugUrl}`, target="_blank") Go to PugJS
            
            //  
                UNESCAPED ATTRIBUTES
            div(unescaped="<code>") Unescaped

            // 
                Boolean ATTRIBUTES
            input(type="checkbox", checked)
            input(type="checkbox", checked=true)
            input(type="checkbox", checked=false)
            input(type="checkbox", checked=true && "checked")

            // 
                STYLE ATTRIBUTES
            a(style={color: "red", background:"white"}) Style Attributes
            br/

            // 
                This section is used for three types of ATTRIBUTES
                CLASS ATTRIBUTES, CLASS LITERAL, ID LITERAL
            - var classes = ["foo", "bar", "bug"];
            div(class=classes) Classes Array
            |
            |
            div.bing(class=classes, class=['bong']) Classes Repeated
            |
            |
            // Angular style class assignment based on the boolean conditions 
            div.bing(class={active: true})
            
            //  
                CLASS LITERALS
            div.button Button using class literal
            .content Default DIV with class literal

            //  
                ID LITERAL
            a#main-link Main link using ID Literal
            #content Default DIV using ID Literal

            // 
                AND ATTRIBUTES &attributes
            div#link(foo-bar="baz")&attributes({"foo-baz":"bar"})

            - var attributes = {};
            - attributes.class = 'beautiful';
            div#link-object(foo-bar="baz")&attributes(attributes)


        //  
            CASE STATEMENT
            This statement is similar to the Switch statement in the Java
        div
            // Case statement heading
            h2 Case Statement

            h4 Case Statement Example:
            - var friends = 10;
            case friends
                when 0
                    p You have no friends.
                when 1
                    p You have 1 friend.
                default
                    p You have #{friends} friends.

            
            h4 Case Statement Block Expansion
            - var friends_01 = 1
            case friends_01
                when 0: p you have no friends
                when 1: p you have a friend
                default: p you have #{friends_01} friends

        
        //  
            CODE
            Pug allows us to write the inline JS code.
            There are three types of the code that is allowed.
            1. Unbuffered
            2. Buffered
            3. Unescaped buffered code

        // 
            UNBUFFERED CODE
            Doesn't add anything to the output
            Just used for the iteration
        div
            h2 Javascript Code
            div
                h4 Unbuffered Code
                p 
                    | This code doesn't add anything to the output
                    | It is helpful in repeating the elements on the page

                // Unbuffered code
                ul
                    - for(var x = 0; x < 3; x++)
                        li item-#{x}
                
                h4 Buffered Code
                p   
                    | This code adds something to the layout as it evaluates a JS expression
                    | The JS code is first HTML escaped
                    | Starts with '='
                
                // Buffered Code
                - var escapedCode = '<code>';
                p
                    =   'This evaluates the JS Expression ' + escapedCode

                h4 Unescaped Buffered Code
                p
                    | This code starts '!=' and evaluates the JS Expression
                    | This code is not HTML Escaped and so it is unsafe for the user
                
                // Unescaped Buffered Code
                - var escapedCode = '<strong>escaped code</strong>';
                p
                    != 'This code is ' + escapedCode
        
        // 
            CONDITIONALS
            Pug allows us to write the conditions in the HTML Templates

        //
            It allows if...else.. also it allows if....else if.....else..... 

        div
            h2 Conditionals
            p   
                | We can use conditionals based on the JavScript object defined.
            
            - 
                var user = {
                    authorized: false,
                    description: 'This is a good user'
                };
            
            if user.authorized
                p 
                    = user.authorized
                p   
                    = user.description
            else 
                p Not Authorized
                p This user is not authorized and doesn't put some description.

            unless user.authorized
                p 
                    | This user is NOT Authorized for using the application.
                    | You should logout if you do not like.
        
        //
            INTERPOLATION
            Pug provides operators for variety of your interpolative needs

        //  
            Interpolation
        div
            h2 Interpolation
            p   
                | Pug provides variety of operators for your interpolative needs.
            
            
            h4 String Interpolation, Escaped
            p
                | String interpolation that is used for the template local variables
            
            - 
                var username = 'testuser@pug.com';
                var password = 'testuserpassword';
                var quote = 'Run until you goal has been acheived';
            
            p Here are the username and password details.
            p
                | This is the username #{username} &nbsp;
                | And this is the password for it #{password}
            div   
                em #{quote.toUpperCase()}

            - var riskyBusiness = "<em>This text has not been escaped.</em>";
            .quote
                p Joel: !{riskyBusiness}
            
            //  
                TAG INTERPOLATION
                Tag Interpolation is used to write the HTML tags inline
            
            h4 Tag Interpolation
            p Tag Interpolation is a tool useful for whitespace control as well.
            p.  
                This paragraph denotes the use of the Tag Interpolation.
                #[em This is an emphasized text]. And the text would be
                there to be there as #[strong bold text].
            
        //
            ITERATION
            Pug supports two methods of iteration:
                1. each
                2. while
        div
            h2 Iteration
            p Pug supports two methods of iteration: #[strong each] and #[strong while].

            h4 each iteration

            ul
                each val in [1, 2, 3, 4]
                    li= val
            
            ul
                each val, index in ['cat', 'tiger', 'lion']
                    li
                        = index + ' : ' + val
            
            ul  
                each val, key in [{name: 'John', id: 1}]
                    li #{key} : #{val.name} => #{val.id}
            
            p Unordered List does not contain any values in the list.
            ul
                each val in []
                    li #{val}
                else
                    li No items present in the list
            
            -
                //- var values = ["fox", "deer", "donkey"];
                var values = [];

            p No items present in the values array and an alternate is provided.
            ul
                each val in values.length ? values : ["cat", "tiger", "lion", "jaguar"]
                    li #{val}
            
            p Using #[strong for] as an alias for #[strong each]
            ul
                for val in ["one", "two", "three"]
                    li #{val}
            
            p Using a #[strong While] loop
            - var n = 0;
            ul
                while n < 4
                    li(class=`while-li-${n}`) #{n++}
                        div(data-item='div-li-'+n)

        //
            MIXINS
            Mixins allow us to create reusable blocks of Pug
        div
            h2 Mixins
            p Mixins allow us to create reusable blocks of Pug code

            h4 Declaration without any arguments
            mixin list
                ul
                    li foo
                    li bar
                    li bax
            // USAGE
            +list

            h4 Declaration with Arguments
            mixin list(name)
                li.pet #{name}
            
            ul
                +list("Doggie")
            
            h4 Mixin Blocks
            mixin article(title)
                .article
                    .article-wrapper
                        h4 #{title}
                        if block
                            block
                        else
                            p No content provided.
            
            +article("Mixing Blocks")
                p This is
                p My awesome provided block.

            h4 Mixin Attributes
            mixin link(href, name)
                a(class!=attributes.class href=href) #{name}
            
            +link('/foo', 'foo')(class="btn")

            h4 Mixin with Default Argument's values
            mixin article(title="Intern's Default Project")
                .article
                    .article-wrapper
                        p  #{title}
            
            // -Use
            +article()
            +article("Explicitly setting the heading")

            h4 Mixin rest of the Attibutes
            mixin list(id, ...items)
                ul(id=id)
                    each item in items
                        li #{item}
            
            +list('my-list', 1, 2, 3, 4, 5)



            






